from typing import Optional, Iterable, Iterator, Union, Any, Tuple, overload
from pathlib import Path

class StringStore:
    def __init__(self, strings: Optional[Iterable[str]]) -> None: ...
    @overload
    def __getitem__(self, string_or_hash: str) -> int: ...
    @overload
    def __getitem__(self, string_or_hash: int) -> str: ...
    @overload
    def as_int(self, string_or_hash: str) -> int: ...
    @overload
    def as_int(self, string_or_hash: int) -> int: ...
    @overload
    def as_string(self, string_or_hash: str) -> str: ...
    @overload
    def as_string(self, string_or_hash: int) -> str: ...
    def add(self, string: str) -> int: ...
    def items(self) -> Tuple[int, str]: ...
    def __len__(self) -> int: ...
    @overload
    def __contains__(self, string_or_hash: str) -> bool: ...
    @overload
    def __contains__(self, string_or_hash: int) -> bool: ...
    def __iter__(self) -> Iterator[str]: ...
    def __reduce__(self) -> Any: ...
    @overload
    def to_disk(self, path: str) -> None: ...
    @overload
    def to_disk(self, path: Path) -> None: ...
    @overload
    def from_disk(self, path: str) -> StringStore: ...
    @overload
    def from_disk(self, path: Path) -> StringStore: ...
    def to_bytes(self, **kwargs: Any) -> bytes: ...
    def from_bytes(self, bytes_data: bytes, **kwargs: Any) -> StringStore: ...
    def _reset_and_load(self, strings: Iterable[str]) -> None: ...

@overload
def get_string_id(string_or_hash: str) -> int: ...
@overload
def get_string_id(string_or_hash: int) -> int: ...
